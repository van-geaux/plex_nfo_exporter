# config.yml

# change plex url and token here
# you can ignore this if you are using PLEX_URL and PLEX_TOKEN environment variables in docker
Base URL: ${PLEX_URL} # i.e http://192.168.1.1:32400 or if reverse proxied i.e. https://plex.yourdomain.tld or fill them in .env file and let this part be
Token: ${PLEX_TOKEN} # how to get token https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/ or fill them in .env file and let this part be

# input the libraries you want to export NFO/poster/fanart from
# if the library type is music, input it TWICE CONSECUTIVELY. This is due to plex having 2 different roots for music library, each for artist and albums
Libraries: ['Movies', 'TV Shows', 'Anime', 'Music', 'Music']

# overwrite files without checking if they are up-to-date with server's metadata
Force overwrite: false

# true/false choose what to export
Export NFO: true
Export poster: true
Export fanart: false
Export season poster: false
Export episode NFO: false

# title, or filename
# title will save as {media_title}.ext i.e. "The Godfather.nfo", "The Godfather_poster.jpg", "The Godfather_fanart.jpg"
# filename will save as {media_file}.ext i.e. "The Godfather (1972) [imdb-tt0068646].nfo", "The Godfather (1972) [imdb-tt0068646]_poster.jpg", "The Godfather (1972) [imdb-tt0068646]_fanart.jpg"
# anything other than that will save as {library_type}.ext i.e. "movie.nfo", "poster.jpg", "fanart.jpg"
Movie NFO name type: default
Movie Poster/art name type: default

# Leave this empty if you use docker volume mapping i.e. Path mapping: []
# change/add path mapping if plex path is different from local (script) path
Path mapping: [
    {
        'plex': '/data_media',
        'local': '/volume1/data/media'
    },
    {
        'plex': '/usb2',
        'local': '/volumeUSB2/usbshare/data'
    },
    {
        'plex': '/debrid',
        'local': '/volume2/debrid'
    }
]

################################ NFO options ################################

# important
# set to false if you know you don't want these metadata
title: true
agent_id: true # will export all available metadata agent ids
tagline: true
plot: true
year: true

# optionals
studio: false
mpaa: false
criticrating: false
customrating: false
runtime: false
releasedate: false
genre: false
country: false
style: false
ratings: false
directors: false
writers: false
roles: false
# producers: false # there's no equivalent in jellyfin metadata

# log level defaults to info for console and warning for file
log_level: 